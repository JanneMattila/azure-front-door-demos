param location string = resourceGroup().location
param username string
@secure()
param password string

param frontDoorName string

var skuName = 'Premium_AzureFrontDoor'

module network './network.bicep' = {
  name: 'vnet-deployment'
  params: {
    location: location
    username: username
    password: password
  }
}

resource frontDoorProfile 'Microsoft.Cdn/profiles@2024-09-01' = {
  name: frontDoorName
  location: 'global'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    logScrubbing: {
      scrubbingRules: []
      state: 'Disabled'
    }
    originResponseTimeoutSeconds: 16
  }
  sku: {
    name: skuName
  }
}

resource endpoint 'Microsoft.Cdn/profiles/afdEndpoints@2024-09-01' = {
  name: 'endpoint1'
  location: 'global'
  parent: frontDoorProfile
  properties: {
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    enabledState: 'Enabled'
  }
}

resource originGroup 'Microsoft.Cdn/profiles/originGroups@2020-09-01' = {
  name: 'origingroup1'
  parent: frontDoorProfile
  properties: {
    loadBalancingSettings: {
      sampleSize: 3
      successfulSamplesRequired: 2
    }
    healthProbeSettings: {
      probePath: '/Probe.aspx'
      probeRequestType: 'HEAD'
      probeProtocol: 'Http'
      probeIntervalInSeconds: 5
    }
  }
}

resource origin1 'Microsoft.Cdn/profiles/originGroups/origins@2020-09-01' = {
  name: 'origin1'
  parent: originGroup
  properties: {
    hostName: network.outputs.vm1PublicIP
    httpPort: 80
    httpsPort: 443
    priority: 1
    weight: 1000
  }
}

resource origin2 'Microsoft.Cdn/profiles/originGroups/origins@2020-09-01' = {
  name: 'origin2'
  parent: originGroup
  properties: {
    hostName: network.outputs.vm2PublicIP
    httpPort: 80
    httpsPort: 443
    priority: 1
    weight: 1000
  }
}

resource route 'Microsoft.Cdn/profiles/afdEndpoints/routes@2020-09-01' = {
  name: 'route1'
  parent: endpoint
  dependsOn: [
    origin1
    origin2
  ]
  properties: {
    originGroup: {
      id: originGroup.id
    }
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [
      '/*'
    ]
    queryStringCachingBehavior: 'IgnoreQueryString'
    forwardingProtocol: 'HttpOnly'
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
  }
}

resource firewallPolicy 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2020-11-01' = {
  name: 'wafpolicy'
  location: 'global'
  sku: {
    name: skuName
  }
  properties: {
    policySettings: {
      mode: 'Prevention'
    }
    managedRules: {
      managedRuleSets: [
        {
          ruleSetType: 'Microsoft_DefaultRuleSet'
          ruleSetVersion: '2.1'
          ruleSetAction: 'Block'
        }
        {
          ruleSetType: 'Microsoft_BotManagerRuleSet'
          ruleSetVersion: '1.1'
        }
      ]
    }
  }
}

resource securityPolicy 'Microsoft.Cdn/profiles/securityPolicies@2021-06-01' = {
  name: 'security-policy'
  parent: frontDoorProfile
  properties: {
    parameters: {
      type: 'WebApplicationFirewall'
      wafPolicy: {
        id: firewallPolicy.id
      }
      associations: [
        {
          domains: [
            {
              id: endpoint.id
            }
          ]
          patternsToMatch: [
            '/*'
          ]
        }
      ]
    }
  }
}

module monitoring './monitoring.bicep' = {
  name: 'monitoring'
  params: {
    parentName: frontDoorProfile.name
    location: location
  }
}

output fqdn string = endpoint.properties.hostName
output frontDoorId string = frontDoorProfile.properties.frontDoorId

output vm1PublicIP string = network.outputs.vm1PublicIP
output vm1PrivateIP string = network.outputs.vm1PrivateIP

output vm2PublicIP string = network.outputs.vm2PublicIP
output vm2PrivateIP string = network.outputs.vm2PrivateIP
