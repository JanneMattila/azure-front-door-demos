param location string = resourceGroup().location
param backendAddress1 string
param backendAddress2 string
param frontDoorName string

var skuName = 'Premium_AzureFrontDoor'

resource frontDoorProfile 'Microsoft.Cdn/profiles@2024-09-01' = {
  name: frontDoorName
  location: 'global'
  identity: {
    type: 'SystemAssigned'
  }
  properties: {
    logScrubbing: {
      scrubbingRules: []
      state: 'Disabled'
    }
    originResponseTimeoutSeconds: 20
  }
  sku: {
    name: skuName
  }
}

resource endpoint 'Microsoft.Cdn/profiles/afdEndpoints@2024-09-01' = {
  name: 'endpoint1'
  location: 'global'
  parent: frontDoorProfile
  properties: {
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    enabledState: 'Enabled'
  }
}

resource originGroup1 'Microsoft.Cdn/profiles/originGroups@2020-09-01' = {
  name: 'origingroup1'
  parent: frontDoorProfile
  properties: {
    sessionAffinityState: 'Disabled'
    loadBalancingSettings: {
      sampleSize: 4
      successfulSamplesRequired: 2
      additionalLatencyInMilliseconds: 0
    }
    healthProbeSettings: {
      probePath: '/'
      probeRequestType: 'HEAD'
      probeProtocol: 'Https'
      probeIntervalInSeconds: 15
    }
  }
}

resource originGroup2 'Microsoft.Cdn/profiles/originGroups@2020-09-01' = {
  name: 'origingroup2'
  parent: frontDoorProfile
  properties: {
    sessionAffinityState: 'Disabled'
    loadBalancingSettings: {
      sampleSize: 4
      successfulSamplesRequired: 2
      additionalLatencyInMilliseconds: 0
    }
    healthProbeSettings: {
      probePath: '/'
      probeRequestType: 'HEAD'
      probeProtocol: 'Https'
      probeIntervalInSeconds: 15
    }
  }
}

resource origin1 'Microsoft.Cdn/profiles/originGroups/origins@2020-09-01' = {
  name: 'origin1'
  parent: originGroup1
  properties: {
    hostName: backendAddress1
    originHostHeader: backendAddress1
    httpPort: 80
    httpsPort: 443
    priority: 2
    weight: 10
  }
}

resource origin2 'Microsoft.Cdn/profiles/originGroups/origins@2020-09-01' = {
  name: 'origin2'
  parent: originGroup2
  properties: {
    hostName: backendAddress2
    originHostHeader: backendAddress2
    httpPort: 80
    httpsPort: 443
    priority: 1
    weight: 10
  }
}

resource ruleSet1 'Microsoft.Cdn/profiles/ruleSets@2024-02-01' = {
  name: 'ruleSet1'
  parent: frontDoorProfile
}

resource ruleSet2 'Microsoft.Cdn/profiles/ruleSets@2024-02-01' = {
  name: 'ruleSet2'
  parent: frontDoorProfile
}

resource rule1 'Microsoft.Cdn/profiles/ruleSets/rules@2024-02-01' = {
  name: 'rule1'
  parent: ruleSet1
  properties: {
    order: 100
    conditions: [
      {
        name: 'UrlPath'
        parameters: {
          typeName: 'DeliveryRuleUrlPathMatchConditionParameters'
          operator: 'BeginsWith'
          negateCondition: false
          matchValues: [
            '/echo'
          ]
          transforms: [
            'Lowercase'
            'Trim'
          ]
        }
      }
    ]
    actions: [
      {
        name: 'RouteConfigurationOverride'
        parameters: {
          typeName: 'DeliveryRuleRouteConfigurationOverrideActionParameters'
        }
      }
    ]
    matchProcessingBehavior: 'Continue'
  }
}

resource rule2 'Microsoft.Cdn/profiles/ruleSets/rules@2024-02-01' = {
  name: 'rule2'
  parent: ruleSet2
  properties: {
    order: 100
    conditions: []
    actions: [
      {
        name: 'UrlRewrite'
        parameters: {
          typeName: 'DeliveryRuleUrlRewriteActionParameters'
          sourcePattern: '/'
          destination: '/'
          preserveUnmatchedPath: false
        }
      }
    ]
    matchProcessingBehavior: 'Continue'
  }
}

resource route1 'Microsoft.Cdn/profiles/afdEndpoints/routes@2020-09-01' = {
  name: 'route1'
  parent: endpoint
  dependsOn: [
    origin1
  ]
  properties: {
    originGroup: {
      id: originGroup1.id
    }
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [
      '/*'
    ]
    queryStringCachingBehavior: 'UseQueryString'
    forwardingProtocol: 'HttpsOnly'
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
    compressionSettings: {
      isCompressionEnabled: true
      contentTypesToCompress: [
        'text/html'
        'text/plain'
        'text/css'
        'application/javascript'
        'application/json'
        'application/xml'
        'image/svg+xml'
      ]
    }
    ruleSets: [
      {
        id: ruleSet1.id
      }
    ]
  }
}

resource route2 'Microsoft.Cdn/profiles/afdEndpoints/routes@2024-02-01' = {
  name: 'route2'
  parent: endpoint
  dependsOn: [
    origin2
  ]
  properties: {
    originGroup: {
      id: originGroup2.id
    }
    supportedProtocols: [
      'Http'
      'Https'
    ]
    patternsToMatch: [
      '/ip/*'
      '/ip'
    ]
    originPath: '/'
    forwardingProtocol: 'HttpsOnly'
    linkToDefaultDomain: 'Enabled'
    httpsRedirect: 'Enabled'
    cacheConfiguration: null
    ruleSets: [
      {
        id: ruleSet2.id
      }
    ]
  }
}

resource firewallPolicy 'Microsoft.Network/FrontDoorWebApplicationFirewallPolicies@2020-11-01' = {
  name: 'wafpolicy'
  location: 'global'
  sku: {
    name: skuName
  }
  properties: {
    policySettings: {
      mode: 'Prevention'
    }
    managedRules: {
      managedRuleSets: [
        {
          ruleSetType: 'Microsoft_DefaultRuleSet'
          ruleSetVersion: '2.1'
          ruleSetAction: 'Block'
        }
        {
          ruleSetType: 'Microsoft_BotManagerRuleSet'
          ruleSetVersion: '1.1'
        }
      ]
    }
  }
}

resource securityPolicy 'Microsoft.Cdn/profiles/securityPolicies@2021-06-01' = {
  name: 'security-policy'
  parent: frontDoorProfile
  properties: {
    parameters: {
      type: 'WebApplicationFirewall'
      wafPolicy: {
        id: firewallPolicy.id
      }
      associations: [
        {
          domains: [
            {
              id: endpoint.id
            }
          ]
          patternsToMatch: [
            '/*'
          ]
        }
      ]
    }
  }
}

module monitoring './monitoring.bicep' = {
  name: 'monitoring'
  params: {
    parentName: frontDoorProfile.name
    location: location
  }
}

output fqdn string = endpoint.properties.hostName
output frontDoorId string = frontDoorProfile.properties.frontDoorId
